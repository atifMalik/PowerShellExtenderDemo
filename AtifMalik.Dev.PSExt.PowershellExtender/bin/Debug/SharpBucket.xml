<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpBucket</name>
    </assembly>
    <members>
        <member name="T:SharpBucket.Authentication.BasicAuthentication">
            <summary>
            This class is used for basic authetication with the BitBucket REST API.
            </summary>
        </member>
        <member name="T:SharpBucket.Authentication.OAuthentication2Legged">
            <summary>
            This class helps you authenticated with the BitBucket REST API via the 2 legged OAuth authentication.
            </summary>
        </member>
        <member name="T:SharpBucket.Authentication.OAuthentication3Legged">
            <summary>
            This class helps you authenticated with the BitBucket REST API via the 3 legged OAuth authentication.
            </summary>
        </member>
        <member name="M:SharpBucket.Authentication.OAuthentication3Legged.SetAuthTokens(RestSharp.IRestClient,System.String)">
            <summary>
            Sets the authentication tokens.
            </summary>
            <param name="client">The client.</param>
            <exception cref="T:System.Net.WebException">REST client encountered an error:  + response.ErrorMessage</exception>
        </member>
        <member name="M:SharpBucket.Authentication.OAuthentication3Legged.StartAuthentication">
            <summary>
            Start the OAuth authentication process.
            The method returns the the URL where the user can authorize your application to act on his/her behalf.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/OAuth+on+Bitbucket#OAuthonBitbucket-Step3.RedirecttheusertoBitbuckettoauthorizeyourapplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.Authentication.OAuthentication3Legged.AuthenticateWithPin(System.String)">
            <summary>
            The method is used to obtain the credentials that let you access resources on BitBucket.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/OAuth+on+Bitbucket#OAuthonBitbucket-Step4.RequestanAccessToken
            </summary>
            <param name="pin">The pin / verifier that was obtained in the previous step.</param>
        </member>
        <member name="T:SharpBucket.V1.EndPoints.GroupsEndPoint">
            <summary>
            The groups endpoint provides functionality for querying information about user groups, 
            creating new ones, updating memberships, and deleting them. Both individual and team accounts can define groups.
            To manage group information on an individual account, the caller must authenticate with administrative rights on the account. 
            More info here:
            https://confluence.atlassian.com/bitbucket/groups-endpoint-296093143.html
            </summary>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.GroupsEndPoint.ListGroups">
            <summary>
            Get a list of all groups in an account. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.GroupsEndPoint.GetGroup(System.String)">
            <summary>
            Get the details of a group. 
            </summary>
            <param name="group_slug">The group's slug.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.GroupsEndPoint.CreateGroup(System.String)">
            <summary>
            Creates a new default group 
            </summary>
            <param name="name">The name of the group</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpBucket.V1.EndPoints.GroupsEndPoint.DeleteGroup(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:SharpBucket.V1.EndPoints.GroupsEndPoint.UpdateGroup(System.String,SharpBucket.V1.Pocos.Group)" -->
        <member name="M:SharpBucket.V1.EndPoints.GroupsEndPoint.AddMemberToGroup(System.String,System.String)">
            <summary>
            Adds a member to a group
            </summary>
            <param name="group_slug">The group's slug</param>
            <param name="membername">An individual account name. This can be an account name or the primary email address for the account</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.GroupsEndPoint.ListGroupMembers(System.String)">
            <summary>
            Gets the membership for a group 
            </summary>
            <param name="group_slug">The group's slug.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.GroupsEndPoint.DeleteMemberFromGroup(System.String,System.String)">
            <summary>
            Adds a member to a group
            </summary>
            <param name="group_slug">The group's slug</param>
            <param name="membername">An individual account name. This can be an account name or the primary email address for the account</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V1.EndPoints.IssueResource">
            <summary>
            A "Virtual" End Point that offers easier manipulation of a specific issue.
            </summary>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssueResource.ListFollowers">
            <summary>
            Gets the followers for an individual issue from a repository. 
            authorization is not required for public repositories with a public issue tracker. 
            Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate access.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssueResource.ListComments">
            <summary>
            List all the comments of the issue. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssueResource.GetIssueComment(System.Nullable{System.Int32})">
            <summary>
            Get a specific comment of the issue.
            </summary>
            <param name="commentId">The comment identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssueResource.PostComment(SharpBucket.V1.Pocos.Comment)">
            <summary>
            Post a comment to the issue.
            </summary>
            <param name="comment">The comment you wish to post.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssueResource.PutIssueComment(SharpBucket.V1.Pocos.Comment)">
            <summary>
            Update a comment of the current issue.
            </summary>
            <param name="comment">The comment that you wish to update.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssueResource.DeleteIssueComment(System.Nullable{System.Int32})">
            <summary>
            Delete a specific comment of the issue.
            </summary>
            <param name="commentId">The comment identifier.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="T:SharpBucket.V1.EndPoints.PrivilegesEndPoint">
            <summary>
            Use the privileges endpoint to manage the user privileges (permissions). 
            It allows you to grant specific users access to read, write and or administer your repositories. 
            Only the repository owner, a team account administrator, or an account with administrative rights 
            on the repository can can query or modify repository privileges. 
            To manage group access to your repositories, use the group-privileges Endpoint 
            and to manage privilege settings for team accounts, use the privileges Resource.  
            More info here:
            https://confluence.atlassian.com/display/BITBUCKET/privileges+Endpoint
            </summary>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.PrivilegesEndPoint.ListRepositoryPrivileges(System.String)">
            <summary>
            Gets a list of the privileges granted on a repository.  
            Only the repository owner, a team account administrator, 
            or an account with administrative rights on the repository can make this call.  
            If a repository has no individual users with privileges, the method returns an [] empty array.  
            To get privileges for groups, use the group-privileges Endpoint.
            </summary>
            <param name="repository">Repository identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.PrivilegesEndPoint.GetPrivilegesForAccount(System.String,System.String)">
            <summary>
            Get a list of privileges for an individual account. 
            Only the repository owner, a team account administrator, 
            or an account with administrative rights on the repository can make this call. 
            </summary>
            <param name="repository">The repository whose privileges you wish to get.</param>
            <param name="accountName">The account name whose privileges you wish to get.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V1.EndPoints.IssuesResource">
            <summary>
            The issues resource provides functionality for getting information on issues in an issue tracker, 
            creating new issues, updating them and deleting them. 
            You can access public issues without authentication, but you will only receive a subset of information, 
            and you can't gain access to private repositories' issues. By authenticating, you will get a more detailed set of information, 
            the ability to create issues, as well as access to updating data or deleting issues you have access to.
            </summary>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.ListIssues(SharpBucket.V1.Pocos.IssueSearchParameters)">
            <summary>
            Gets the list of issues in the repository.
            If you issue this call without filtering parameters, the count value contains the total number of issues in the repository's tracker.  
            If you filter this call, the count value contains the total number of issues that meet the filter criteria.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.GetIssue(System.Nullable{System.Int32})">
            <summary>
            Gets in individual issue from a repository. 
            Authorization is not required for public repositories with a public issue tracker. 
            Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate access. 
            </summary>
            <param name="issueId">The issue identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PostIssue(SharpBucket.V1.Pocos.Issue)">
            <summary>
            Creates a new issue in a repository. This call requires authentication. 
            Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            The authenticated user is used for the issue's reported_by field.
            </summary>
            <param name="issue">The issue.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PutIssue(SharpBucket.V1.Pocos.Issue)">
            <summary>
            Updates an existing issue. Updating the title or content fields requires that the caller authenticate as a user with write access. 
            For other fields, the caller must authenticate as a user with read access. 
            Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate access. 
            </summary>
            <param name="issue">The issue.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteIssue(System.Nullable{System.Int32})">
            <summary>
            Deletes the specified issue_id. 
            Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate access. 
            </summary>
            <param name="issueId">The issue identifier.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.ListComponents">
            <summary>
            List the components associated with the issue tracker. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.GetComponent(System.Nullable{System.Int32})">
            <summary>
            Gets an individual component in an issue tracker. 
            To get a component, private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="componentId">The component identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PostComponent(SharpBucket.V1.Pocos.Component)">
            <summary>
            Creates a new component in an issue tracker. 
            You must supply a name value in the form of a string. 
            The server creates the id for you and it appears in the return value. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation.
            </summary>
            <param name="component">The component.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PutComponent(SharpBucket.V1.Pocos.Component)">
            <summary>
            Updates an existing component in an issue tracker. 
            You must supply a name value in the form of a string. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="component">The component.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteComponent(System.Nullable{System.Int32})">
            <summary>
            Deletes a component in an issue tracker. Keep in mind that the component can be in use on existing issues. 
            To delete a component, public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="componentId">The component identifier.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.ListVersions">
            <summary>
            List all the versions associated with the issue tracker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.GetVersion(System.Nullable{System.Int32})">
            <summary>
            Gets an individual version in an issue tracker. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="versionId">The version identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PostVersion(SharpBucket.V1.Pocos.Version)">
            <summary>
            Creates a new version in an issue tracker. You must supply a name value in the form of a string. 
            The server creates the id for you and it appears in the return value. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="version">The version.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PutVersion(SharpBucket.V1.Pocos.Version)">
            <summary>
            Updates an existing version in an issue tracker. You must supply a name value in the form of a string. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="version">The version.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteVersion(System.Nullable{System.Int32})">
            <summary>
            Deletes a version in an issue tracker. Keep in mind that the version can be in use on existing issues. 
            To delete a version, public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="versionId">The version identifier.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.ListMilestones">
            <summary>
            List all the milestones associated with the issue tracker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.GetMilestone(System.Nullable{System.Int32})">
            <summary>
            Gets an individual milestone in an issue tracker. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation.
            </summary>
            <param name="milestoneId">The milestone identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PostMilestone(SharpBucket.V1.Pocos.Milestone)">
            <summary>
            Creates a new milestone in an issue tracker. You must supply a name value in the form of a string. 
            The server creates the id for you and it appears in the return value. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="milestone">The milestone.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PutMilestone(SharpBucket.V1.Pocos.Milestone)">
            <summary>
            Updates an existing milestone in an issue tracker. 
            You must supply a name value in the form of a string. 
            Public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation.
            </summary>
            <param name="milestone">The milestone.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteMilestone(System.Nullable{System.Int32})">
            <summary>
            Deletes a milestone in an issue tracker. Keep in mind that the milestone can be in use on existing issues. 
            To delete a milestone, public and private issue trackers require the caller to authenticate with an account that has appropriate authorisation. 
            </summary>
            <param name="milestoneId">The milestone identifier.</param>
            <returns>The response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.IssueResource(System.Int32)">
            <summary>
            Get the issue resource.
            BitBucket does not have this resource so this is a "virtual" resource
            which offers easier access manipulation of the specified issue.
            </summary>
            <param name="issueId">The Id of the issue whose resource you wish to get.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.ListIssueComments(System.Int32)">
            <summary>
            List all the comments on the specified issue. 
            </summary>
            <param name="issueId">The issue identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.GetIssueComment(SharpBucket.V1.Pocos.Issue,System.Nullable{System.Int32})">
            <summary>
            Get a specific comment of an issue.
            </summary>
            <param name="issue">The issue.</param>
            <param name="commentId">The comment identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.GetIssueComment(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get a specific comment of an issue.
            </summary>
            <param name="issueId">The issue identifier.</param>
            <param name="commentId">The comment identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PostIssueComment(SharpBucket.V1.Pocos.Issue,SharpBucket.V1.Pocos.Comment)">
            <summary>
            Post a comment to the selected issue.
            </summary>
            <param name="issue">The issue.</param>
            <param name="comment">The comment.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PostIssueComment(System.Int32,SharpBucket.V1.Pocos.Comment)">
            <summary>
            Post a comment to the selected issue.
            </summary>
            <param name="issueId">The issue identifier.</param>
            <param name="comment">The comment.</param>
            <returns>Response from the BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PutIssueComment(SharpBucket.V1.Pocos.Issue,SharpBucket.V1.Pocos.Comment)">
            <summary>
            Update a specific comment of an issue.
            </summary>
            <param name="issue">The issue.</param>
            <param name="comment">The comment.</param>
            <returns>The response of BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.PutIssueComment(System.Int32,SharpBucket.V1.Pocos.Comment)">
            <summary>
            Update a specific comment of an issue.
            </summary>
            <param name="issueId">The issue identifier.</param>
            <param name="comment">The comment.</param>
            <returns>The response of BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteIssueComment(SharpBucket.V1.Pocos.Issue,SharpBucket.V1.Pocos.Comment)">
            <summary>
            Delete a specific comment of an issue.
            </summary>
            <param name="issue">The issue.</param>
            <param name="comment">The comment.</param>
            <returns>The response of BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteIssueComment(SharpBucket.V1.Pocos.Issue,System.Nullable{System.Int32})">
            <summary>
            Delete a specific comment of an issue.
            </summary>
            <param name="issue">The issue.</param>
            <param name="commentId">The comment identifier.</param>
            <returns>The response of BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteIssueComment(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Delete a specific comment of an issue.
            </summary>
            <param name="issueId">The issue identifier.</param>
            <param name="commentId">The comment identifier.</param>
            <returns>The response of BitBucket API.</returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.IssuesResource.DeleteIssueComment(System.Nullable{System.Int32},SharpBucket.V1.Pocos.Comment)">
            <summary>
            Delete a specific comment of an issue.
            </summary>
            <param name="issueId">The issue identifier.</param>
            <param name="comment">The comment.</param>
            <returns>The response of BitBucket API.</returns>
        </member>
        <member name="T:SharpBucket.V1.EndPoints.RepositoriesEndPoint">
            <summary>
            The repositories endpoint has a number of resources you can use to manage repository resources. 
            For all repository resources, you supply a repo_slug that identifies the specific repository.  
            For example, the repo_slug for the repository https://bitbucket.org/tortoisehg/thg is thg.  
            More info here:
            https://confluence.atlassian.com/display/BITBUCKET/repositories+Endpoint+-+1.0
            </summary>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.ListChangeset">
            <summary>
            Gets a list of change sets associated with a repository. By default, this call returns the 15 most recent changesets. 
            It also returns the count which is the total number of changesets on the repository. 
            Private repositories require the caller to authenticate. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetChangeset(SharpBucket.V1.Pocos.Changeset)">
            <summary>
            Gets a specific changeset node. Private repositories require the caller to authenticate. 
            </summary>
            <param name="changeset">The change set.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetChangeset(System.String)">
            <summary>
            Gets a specific changeset  node. Private repositories require the caller to authenticate. 
            </summary>
            <param name="node">The node changeset identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetChangesetDiffstat(SharpBucket.V1.Pocos.Changeset)">
            <summary>
            List containing statistics on changed file associated with a particular node in a change set. 
            Private repositories require the caller to authenticate. 
            </summary>
            <param name="changeset">The change set whose diff stat you wish to get.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetChangesetDiffstat(System.String)">
            <summary>
            List containing statistics on changed file associated with a particular node in a change set. 
            Private repositories require the caller to authenticate. 
            </summary>
            <param name="node">The node changeset identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetChangesetDiff(SharpBucket.V1.Pocos.Changeset)">
            <summary>
            Gets the actual diff associated with the changeset node. 
            This call returns the output as a string containing JSON. Private repositories require the caller to authenticate.
            </summary>
            <param name="changeset">The changeset.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetChangesetDiff(System.String)">
            <summary>
            Gets the actual diff associated with the changeset node. 
            This call returns the output as a string containing JSON. Private repositories require the caller to authenticate.
            </summary>
            <param name="node">The node changeset identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.ListDeployKeys">
            <summary>
            List all of the keys associated with an repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetDeployKey(System.Nullable{System.Int32})">
            <summary>
            Gets the content of the specified key_id. This call requires authentication. 
            </summary>
            <param name="pk">The key identifier assigned by Bitbucket. Use the GET call to obtain this value.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.PostDeployKey(SharpBucket.V1.Pocos.SSH)">
            <summary>
            Creates a key on the specified account. You must supply a valid key that is unique across the Bitbucket service. 
            A public key contains characters need to be escaped before sending it as a POST data. So, use the proper escaping ( urlencode ), 
            if you are testing to add a key via your terminal. This call requires authentication. 
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.DeleteDeployKey(SharpBucket.V1.Pocos.SSH)">
            <summary>
            Deletes the key specified by the key_id value. This call requires authentication. 
            </summary>
            <param name="key">The key identifier assigned by Bitbucket. Use the GET call to obtain this value.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.ListEvents">
            <summary>
            List all events of a repository's events associated with the specified repo_slug. By default, this call returns the top 25 events. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.IssuesResource">
            <summary>
            The issues resource provides functionality for getting information on issues in an issue tracker, 
            creating new issues, updating them and deleting them. 
            You can access public issues without authentication, but you will only receive a subset of information, 
            and you can't gain access to private repositories' issues. By authenticating, you will get a more detailed set of information, 
            the ability to create issues, as well as access to updating data or deleting issues you have access to.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/issues+Resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.ListLinks">
            <summary>
            List all the links associated with a repository. The caller must authenticate as a user with administrative access to the repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetLink(System.Nullable{System.Int32})">
            <summary>
            Gets an individual link on a repository. The caller must authenticate as a user with administrative access to the repository. 
            </summary>
            <param name="linkId">The link id.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.PostLink(SharpBucket.V1.Pocos.Link)">
            <summary>
            Creates a new link on the repository. 
            </summary>
            <param name="link">The link.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.PutLink(SharpBucket.V1.Pocos.Link)">
            <summary>
            Update a repository link. 
            </summary>
            <param name="link">The link.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.DeleteLink(SharpBucket.V1.Pocos.Link)">
            <summary>
            Deletes the repository link identified by the object_id. The caller must authenticate as a user with administrative access to the repository. 
            </summary>
            <param name="link">The link.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.ListBranches">
            <summary>
            Gets a list of branches associated with a repository. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetMainBranch">
            <summary>
            Gets the main-branch associated with the repository. 
            You set the main branch from a repository's Repository details page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.ListTags">
            <summary>
            Use this resource to list the tags and branches for a given repository. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetWiki(System.String)">
            <summary>
            Gets the contents of a wiki page and the current revision. 
            You must supply the title of a page to get.  When getting a page, do not include the extension .wiki. 
            If you do not supply a page value, the default is the Home page
            </summary>
            <param name="page">Title of the page.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.PostWiki(SharpBucket.V1.Pocos.Wiki,System.String)">
            <summary>
            Creates a new wiki page. 
            </summary>
            <param name="newPage">Title of the page.</param>
            <param name="location">Path to the page.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.PutWiki(SharpBucket.V1.Pocos.Wiki,System.String)">
            <summary>
            Updates an existng wiki page.
            </summary>
            <param name="updatedPage">Title of the page.</param>
            <param name="location">Path to the page.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetRevisionSrc(System.String,System.String)">
            <summary>
            Lists the source files for a given revision and path.
            </summary>
            <param name="revision">Revision to get.</param>
            <param name="path">File to get.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.RepositoriesEndPoint.GetRevisionRaw(System.String,System.String)">
            <summary>
            Retrieves file contents. 
            </summary>
            <param name="revision">Revision to get.</param>
            <param name="path">File to get.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V1.EndPoints.UserEndPoint">
            <summary>
            Use the user endpoints to gets information related to the currently authenticated user. 
            It is useful for OAuth or other in situations where the username is unknown. 
            This endpoint returns information about an individual or team account. 
            Individual and team accounts both have the same set of user fields:
            More info here:
            https://confluence.atlassian.com/display/BITBUCKET/user+Endpoint
            </summary>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UserEndPoint.GetInfo">
            <summary>
            Gets the basic information associated with an account and a list of all of the repositories owned by the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UserEndPoint.ListPrivileges">
            <summary>
            List the account-level privileges for an individual or team account. 
            Use this call to locate the accounts that the currently authenticated accountname has access to. 
            An account can have admin or collaborator (member) privileges. The accountname always has admin privileges on itself. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UserEndPoint.ListFollows">
            <summary>
            List the details of the repositories that the individual or team account follows. 
            This call returns the full data about the repositories including if the repository is a fork of another repository. 
            An account always "follows" its own repositories. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UserEndPoint.ListRepositories">
            <summary>
            List the details of the repositories that the user owns or has at least read access to. 
            Use this if you're looking for a full list of all of the repositories associated with a user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UserEndPoint.RepositoriesOverview">
            <summary>
            List the repositories the account follows.  This is the same list that appears on the Following tab on your account dashboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UserEndPoint.GetRepositoryDasboard">
            <summary>
            List the repositories from the account's dashboard.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V1.EndPoints.UsersEndPoint">
            <summary>
            The users endpoints gets information related to an individual or team account. 
            Individual and team accounts both have the same set of user fields:
            More info here:
            https://confluence.atlassian.com/display/BITBUCKET/users+Endpoint+-+1.0
            </summary>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.ListUserEvents">
            <summary>
            Gets a count and the list of events associated with an account. 
            This call requires authentication.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.ListUserPrivileges">
            <summary>
            Gets the groups with account privileges defined for a team account. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.ListInvitations">
            <summary>
            List of pending invitations on a team or individual account. 
            This call requires authorization and the caller must have administrative rights on the account.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.GetInvitationsFor(System.String)">
            <summary>
            List any pending invitations on a team or individual account for a particular email address. 
            Any user with admin access to the account can invite someone to a group. 
            This call requires authorization and the caller must have administrative rights on the account.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.ListFollowers">
            <summary>
            Gets a count and the list of accounts following an account. Use this API to get a list of the individuals following an account. 
            Currently, the Bitbucket UI does not list each account, it only displays the count. This call requires authentication.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.ListConsumers">
            <summary>
            List the consumers integrated with the account.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.GetConsumer(System.Nullable{System.Int32})">
            <summary>
            Get an individual consumer for an account.
            </summary>
            <param name="consumerId">Identifier for the key.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.ListSSHKeys">
            <summary>
            List all of the keys associated with an account. This call requires authentication. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.GetSSHKey(System.Nullable{System.Int32})">
            <summary>
            Gets the content of the specified key_id. 
            This call requires authentication. 
            </summary>
            <param name="pk">The key identifier. This is an internal value created by Bitbucket when the key is added.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.ListEmails">
            <summary>
            List of all the email addresses associated with the account. 
            This call requires authentication. The possible return fields are the same for both individual and team accounts. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.EndPoints.UsersEndPoint.GetEmail(System.String)">
            <summary>
            Get an individual email address associated with an account. 
            This call requires authentication. 
            </summary>
            <param name="email">The email address to get.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.SharpBucketV1.#ctor">
            <summary>
            A client for the V1 of the BitBucketAPI.
            You can read more about the V1 of the API here:
            https://confluence.atlassian.com/display/BITBUCKET/Version+1
            </summary>
        </member>
        <member name="M:SharpBucket.V1.SharpBucketV1.#ctor(System.String)">
            <summary>
            A client for the V1 of the BitBucketAPI.
            You can read more about the V1 of the API here:
            https://confluence.atlassian.com/display/BITBUCKET/Version+1
            </summary>
            <param name="baseUrl">If you are locally hosting your BitBucket repository
            you can use this constructor to set the url of your local Bitbucket server.
            All API requests will then use this url as a base. 
            </param>
        </member>
        <member name="M:SharpBucket.V1.SharpBucketV1.PrivilegesEndPoint(System.String)">
            <summary>
            Get the Privileges End Point for a specific account.
            </summary>
            <param name="accountName">The account for which you wish to get the Privileges End Point.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.SharpBucketV1.RepositoriesEndPoint(System.String,System.String)">
            <summary>
            Get the Repositories End Point for a specific repository and account.
            </summary>
            <param name="accountName">The account that is the owner of the specific repository.</param>
            <param name="repository">The repository of interest.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.SharpBucketV1.UserEndPoint">
            <summary>
            Use the user endpoints to gets information related to the currently authenticated user. 
            It is useful for OAuth or other in situations where the username is unknown. 
            This endpoint returns information about an individual or team account. 
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/user+Endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.SharpBucketV1.UsersEndPoint(System.String)">
            <summary>
            Get the Users End Point for a specific account.
            </summary>
            <param name="accountName">The account for which you wish to get the Users End Point.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V1.SharpBucketV1.GroupsEndPoint(System.String)">
            <summary>
            The groups endpoint provides functionality for querying information about user groups, 
            creating new ones, updating memberships, and deleting them. Both individual and team accounts can define groups.
            To manage group information on an individual account, the caller must authenticate with administrative rights on the account. 
            More info:
            https://confluence.atlassian.com/bitbucket/groups-endpoint-296093143.html
            </summary>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.BranchResource.#ctor(System.String,System.String,SharpBucket.V2.EndPoints.RepositoriesEndPoint)">
            <summary>
            Manage branches for a repository. Use this resource to perform CRUD (create/read/update/delete) operations. 
            More info:
            https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.BranchResource.ListBranches">
            <summary>
            Lists all branches associated with a specific repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.EndPoint.IteratePages``1(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generator that allows lazy access to paginated resources.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="overrideUrl"></param>
            <param name="pageLen"></param>
            <param name="requestParameters"></param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.EndPoint.GetPaginatedValues``1(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a list of paginated values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="overrideUrl">The override URL.</param>
            <param name="max">Set to 0 for unlimited size.</param>
            <param name="requestParameters"></param>
            <returns></returns>
            <exception cref="T:System.Net.WebException">Thrown when the server fails to respond.</exception>
        </member>
        <member name="T:SharpBucket.V2.EndPoints.PullRequestResource">
            <summary>
            A "Virtual" resource that offers easier manipulation of the pull request.
            </summary>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.GetPullRequest">
            <summary>
            List all the pull requests info for the repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.ListPullRequestCommits">
            <summary>
            List of the commits associated with a specific pull request, follow the pull request's commits link. This returns a paginated response.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.ApprovePullRequest">
            <summary>
            Give your approval on a pull request. You can only approve a request on behalf of the authenticated account. 
            This returns the participant object for the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.RemovePullRequestApproval">
            <summary>
            Revoke your approval on a pull request. You can remove approvals on behalf of the authenticated account.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.GetDiffForPullRequest">
            <summary>
            Gets the diff or patch for a pull request. This returns a 302 redirect response with the Location header 
            set to the URL that will perform a temporary merge and return the diff of it. The result is identical to diff in the UI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.GetPullRequestActivity">
            <summary>
            Gets a log of the activity for a specific pull request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.AcceptAndMergePullRequest">
            <summary>
            Accept a pull request and merges into the destination branch. This requires write access on the destination repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.DeclinePullRequest">
            <summary>
            Rejects a pull request. This requires write access on the destination repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.ListPullRequestComments">
            <summary>
            List of comments on the specified pull request. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestResource.GetPullRequestComment(System.Int32)">
            <summary>
            Gets an individual comment on an request. Private repositories require authorization with an account that has appropriate access.
            </summary>
            <param name="commentId">The comment identifier.</param>      /// <returns></returns>
        </member>
        <member name="T:SharpBucket.V2.EndPoints.PullRequestsResource">
            <summary>
            Manage pull requests for a repository. Use this resource to perform CRUD (create/read/update/delete) operations on a pull request. 
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/pullrequests+Resource
            </summary>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestsResource.ListPullRequests(System.Int32)">
            <summary>
            List all of a repository's open pull requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestsResource.PostPullRequest(SharpBucket.V2.Pocos.PullRequest)">
            <summary>
            Creates a new pull request. The request URL you provide is the destination repository URL. 
            For this reason, you must specify an explicit source repository in the request object if you want to pull from a different repository.
            </summary>
            <param name="pullRequest">The pull request.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestsResource.PutPullRequest(SharpBucket.V2.Pocos.PullRequest)">
            <summary>
            Updates an existing pull request. The pull request's status must be open. 
            With the exception of the source and destination parameters, the request body must include all the existing request parameters; 
            Omitting a parameter causes the server to drop the existing value. For example, if the pull requests already has 3 reviewers, 
            the request body must include these 3 reviewers to prevent Bitbucket from dropping them.
            </summary>
            <param name="pullRequest">The pull request.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestsResource.GetPullRequestLog">
            <summary>
            Returns all the pull request activity for a repository. This call returns a historical log of all the pull request activity within a repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.PullRequestsResource.PullRequestResource(System.Int32)">
            <summary>
            Get the Pull Request Resource.
            BitBucket does not have this Resource so this is a "Virtual" resource
            which offers easier manipulation of a specific Pull Request.
            </summary>
            <param name="pullRequestId">The pull request identifier.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V2.EndPoints.RepositoryResource">
            <summary>
            Use this resource to get information associated with an individual repository. 
            You can use these calls with public or private repositories. 
            Private repositories require the caller to authenticate with an account that has the appropriate authorization.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/repository+Resource
            </summary>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.GetRepository">
            <summary>
            Returns a single repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.DeleteRepository">
            <summary>
            Removes a repository.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.ListWatchers">
            <summary>
            Gets the list of accounts watching a repository. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.ListForks">
            <summary>
            List of repository forks, This call returns a repository object for each fork.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.PullRequestsResource">
            <summary>
            Manage pull requests for a repository. Use this resource to perform CRUD (create/read/update/delete) operations on a pull request. 
            This resource allows you to manage the attributes of a pull request also. For example, you can list the commits 
            or reviewers associated with a pull request. You can also accept or decline a pull request with this resource. 
            Finally, you can use this resource to manage the comments on a pull request as well.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/pullrequests+Resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.ListBranchRestrictions">
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/branch-restrictions+Resource
            <summary>
            List the information associated with a repository's branch restrictions. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.PostBranchRestriction(SharpBucket.V2.Pocos.BranchRestriction)">
            <summary>
            Creates restrictions for the specified repository. You should specify a Content-Header with this call. 
            </summary>
            <param name="restriction">The branch restriction.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.GetBranchRestriction(System.Int32)">
            <summary>
            Gets the information associated with specific restriction. 
            </summary>
            <param name="restrictionId">The restriction's identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.PutBranchRestriction(SharpBucket.V2.Pocos.BranchRestriction)">
            <summary>
            Updates a specific branch restriction. You cannot change the kind value with this call. 
            </summary>
            <param name="restriction">The branch restriction.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.DeleteBranchRestriction(System.Int32)">
            <summary>
            Deletes the specified restriction.  
            </summary>
            <param name="restrictionId">The restriction's identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.GetDiff(System.Object)">
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/diff+Resource
            <summary>
            Gets the diff for the current repository.  
            </summary>
            <param name="options">The diff options.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.GetPatch(System.Object)">
            <summary>
            Gets the patch for an individual specification. 
            </summary>
            <param name="options">The patch options.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.ListCommits(System.String,System.Int32)">
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/commits+or+commit+Resource
            <summary>
            Gets the commit information associated with a repository. 
            By default, this call returns all the commits across all branches, bookmarks, and tags. The newest commit is first. 
            </summary>
            <param name="branchortag">The branch or tag to get, for example, master or default.</param>
            <param name="max">Values greater than 0 will set a maximum number of records to return. 0 or less returns all.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.GetCommit(System.String)">
            <summary>
            Gets the information associated with an individual commit. 
            </summary>
            <param name="revision">The commit's SHA1.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.ListCommitComments(System.String)">
            <summary>
            List of comments on the specified commit.
            </summary>
            <param name="revision">The commit's SHA1.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.GetCommitComment(System.String,System.Int32)">
            <summary>
            To get an individual commit comment, just follow the object's self link.
            </summary>
            <param name="revision">The commit's SHA1.</param>
            <param name="commentId">The comment identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.ApproveCommit(System.String)">
            <summary>
            Give your approval on a commit.  
            You can only approve a comment on behalf of the authenticated account.  This returns the participant object for the current user.
            </summary>
            <param name="revision">The commit's SHA1.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.DeleteCommitApproval(System.String)">
            <summary>
            Revoke your approval of a commit. You can remove approvals on behalf of the authenticated account. 
            </summary>
            <param name="revision">The commit's SHA1.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.AddNewBuildStatus(System.String,SharpBucket.V2.Pocos.BuildInfo)">
            <summary>
            Creates a new build status against the specified commit. If the specified key already exists, the existing status object will be overwritten.
            </summary>
            <param name="revision">The commit's SHA1</param>
            <param name="buildInfo">The new commit status object</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.GetBuildStatusInfo(System.String,System.String)">
            <summary>
            Returns the specified build status for a commit.
            </summary>
            <param name="revision">The commit's SHA1</param>
            <param name="key">The build status' unique key</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.ChangeBuildStatusInfo(System.String,System.String,SharpBucket.V2.Pocos.BuildInfo)">
            <summary>
            Used to update the current status of a build status object on the specific commit.
            </summary>
            <param name="revision">The commit's SHA1</param>
            <param name="key">The build status' unique key</param>
            <param name="buildInfo">The new commit status object</param>
            <returns></returns>
            /// <remarks>This operation can also be used to change other properties of the build status: state, name, description, url, refname. The key cannot be changed.</remarks>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoryResource.PutDefaultReviewer(System.String)">
            <summary>
            Adds a user as the default review for pull requests on a repository.
            </summary>
            <param name="targetUsername">The user to add as the default reviewer.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.TagResource.#ctor(System.String,System.String,SharpBucket.V2.EndPoints.RepositoriesEndPoint)">
            <summary>
            Manage tags for a repository. Use this resource to perform CRUD (create/read/update/delete) operations. 
            More info:
            https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.TagResource.ListTags">
            <summary>
            Lists all Tags associated with a specific repository.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V2.EndPoints.RepositoriesEndPoint">
            <summary>
            The repositories endpoint has a number of resources you can use to manage repository resources. 
            For all repository resources, you supply a  repo_slug that identifies the specific repository.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/repositories+Endpoint
            </summary>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoriesEndPoint.ListRepositories(System.String,System.Int32)">
            <summary>
            List of repositories associated with an account. If the caller is properly authenticated and authorized, 
            this method returns a collection containing public and private repositories. 
            Otherwise, this method returns a collection of the public repositories. 
            </summary>
            <param name="accountName">The account whose repositories you wish to get.</param>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoriesEndPoint.ListPublicRepositories(System.Int32)">
            <summary>
            List of all the public repositories on Bitbucket.  This produces a paginated response. 
            Pagination only goes forward (it's not possible to navigate to previous pages) and navigation is done by following the URL for the next page.
            The returned repositories are ordered by creation date, oldest repositories first. Only public repositories are returned.
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.RepositoriesEndPoint.RepositoryResource(System.String,System.String)">
            <summary>
            Use this resource to get information associated with an individual repository. You can use these calls with public or private repositories. 
            Private repositories require the caller to authenticate with an account that has the appropriate authorization.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/repository+Resource
            </summary>
            <param name="accountName">The owner of the repository.</param>
            <param name="repository">The repository slug.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V2.EndPoints.TeamsEndPoint">
            <summary>
            The Teams End Point gets a team's profile information.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/teams+Endpoint
            </summary>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.TeamsEndPoint.GetProfile">
            <summary>
            Gets the public information associated with a team. 
            If the team's profile is private, the caller must be authenticated and authorized to view this information. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.TeamsEndPoint.ListMembers(System.Int32)">
            <summary>
            Gets the team's members.
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.TeamsEndPoint.ListFollowers(System.Int32)">
            <summary>
            Gets the list of accounts following the team.
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.TeamsEndPoint.ListFollowing(System.Int32)">
            <summary>
            Gets a list of accounts the team is following.
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.TeamsEndPoint.ListRepositories(System.Int32)">
            <summary>
            Gets the list of the team's repositories. 
            Private repositories only appear on this list if the caller is authenticated and is authorized to view the repository.
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V2.EndPoints.UsersEndpoint">
            <summary>
            The UsersEndPoint End Point gets a user account's profile information.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/users+Endpoint
            </summary>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.UsersEndpoint.GetProfile">
            <summary>
            Gets the public information associated with a user. 
            If the user's profile is private, the caller must be authenticated as the account holder to view this information.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.UsersEndpoint.ListFollowers(System.Int32)">
            <summary>
            List all the accounts following the user.  
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.UsersEndpoint.ListFollowing(System.Int32)">
            <summary>
            List all the accounts the user is following. 
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.EndPoints.UsersEndpoint.ListRepositories(System.Int32)">
            <summary>
            List all of the user's repositories. 
            Private repositories only appear on this list if the caller is authenticated and is authorized to view the repository.
            </summary>
            <param name="max">The maximum number of items to return. 0 returns all items.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.V2.Pocos.IteratorBasedPage`1">
            <summary>
            Models a page of data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SharpBucket.V2.Pocos.ListBasedPage`1">
            <summary>
            Models a page of data in a finite, immutable resource collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SharpBucket.V2.SharpBucketV2">
            <summary>
            A client for the V2 of the BitBucket API.
            You can read more about the V2 of the API here:
            https://confluence.atlassian.com/display/BITBUCKET/Version+2
            </summary>
        </member>
        <member name="M:SharpBucket.V2.SharpBucketV2.TeamsEndPoint(System.String)">
            <summary>
            Get the Teams End Point for a specific team.
            </summary>
            <param name="teamName">The team whose team End Point you wish to get.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.SharpBucketV2.RepositoriesEndPoint">
            <summary>
            Get the Repositories End point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.V2.SharpBucketV2.UsersEndPoint(System.String)">
            <summary>
            Get the UsersEndPoint End Point.
            </summary>
            <param name="accountName">The account for which you wish to get the UsersEndPoint End Point.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBucket.SharpBucket">
            <summary>
            A client for the BitBucket API. It supports V1 and V2 of the API.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/Use+the+Bitbucket+REST+APIs
            </summary>
        </member>
        <member name="F:SharpBucket.SharpBucket._baseUrl">
            <summary>
            The base URL exposing the BitBucket API.
            </summary>
        </member>
        <member name="M:SharpBucket.SharpBucket.BasicAuthentication(System.String,System.String)">
            <summary>   
            Use basic authentication with the BitBucket API. OAuth authentication is preferred over
            basic authentication, due to security reasons.
            </summary>
            <param name="username">Your BitBucket user name.</param>
            <param name="password">Your BitBucket password.</param>
        </member>
        <member name="M:SharpBucket.SharpBucket.OAuth2LeggedAuthentication(System.String,System.String)">
            <summary>
            Use 2 legged OAuth 1.0a authentication. This is similar to basic authentication, since
            it requires the same number of steps. It is still safer to use than basic authentication, 
            since you can revoke the API keys.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/OAuth+on+Bitbucket
            </summary>
            <param name="consumerKey">Your consumer API key obtained from the BitBucket web page.</param>
            <param name="consumerSecretKey">Your consumer secret API key also obtained from the BitBucket web page.</param>
        </member>
        <member name="M:SharpBucket.SharpBucket.OAuth3LeggedAuthentication(System.String,System.String,System.String)">
            <summary>
            Use 3 legged OAuth 1.0a authentication. This is the most secure one, but for simple uses it might
            be a bit too complex.
            More info:
            https://confluence.atlassian.com/display/BITBUCKET/OAuth+on+Bitbucket
            </summary>
            <param name="consumerKey">Your consumer API key obtained from the BitBucket web page.</param>
            <param name="consumerSecretKey">Your consumer secret API key also obtained from the BitBucket web page.</param>
            <param name="callback">Callback URL to which BitBucket will send the pin.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.SharpBucket.OAuth3LeggedAuthentication(System.String,System.String,System.String,System.String)">
            <summary>
            Use 3 legged OAuth 1.0a authentication. Use this method if you have already obtained the OAuthToken
            and OAuthSecretToken. This method can be used so you do not have to go trough the whole 3 legged
            process every time. You can save the tokens you receive the first time and reuse them in another session.
            </summary>
            <param name="consumerKey">Your consumer API key obtained from the BitBucket web page.</param>
            <param name="consumerSecretKey">Your consumer secret API key also obtained from the BitBucket web page.</param>
            <param name="oauthToken">Your OAuth token that was obtained on a previous session.</param>
            <param name="oauthTokenSecret">Your OAuth secret token thata was obtained on a previous session.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBucket.SharpBucket.OAuthentication2(System.String,System.String)">
            <summary>
            Use Oauth2 authentication. This is the neweset version and is prefered.
            </summary>
            <param name="consumerKey"></param>
            <param name="consumerSecretKey"></param>
            <returns></returns>
        </member>
    </members>
</doc>
